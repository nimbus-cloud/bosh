#!/usr/bin/perl
# -*- cperl -*-
#
# Copyright (C) 2009 Magnus Hagander, Redpill Linpro AB
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.

use strict;
use warnings;

use Munin::Plugin::Pgsql;

my $pg = Munin::Plugin::Pgsql->new(
    title  => 'PostgreSQL connections per database',
    info   => 'Number of connections per database',
    vlabel => 'Connections',
    basequery => [
        "SELECT pg_database.datname,COALESCE(count,0) AS count FROM pg_database LEFT JOIN (SELECT datname,count(*) FROM pg_stat_activity WHERE pid != pg_backend_pid() GROUP BY datname) AS tmp ON pg_database.datname=tmp.datname WHERE datallowconn ORDER BY 1",
        [
            9.1,
            "SELECT pg_database.datname,COALESCE(count,0) AS count FROM pg_database LEFT JOIN (SELECT datname,count(*) FROM pg_stat_activity WHERE procpid != pg_backend_pid() GROUP BY datname) AS tmp ON pg_database.datname=tmp.datname WHERE datallowconn ORDER BY 1",
        ]
    ],
    configquery =>
        "SELECT datname,datname FROM pg_database WHERE datallowconn ORDER BY 1",
);

$pg->Process();
ubuntu@packer-vmware-iso:/bosh/stemcell_builder/stages/munin/assets/plugins/postgres$ ls
pg_connections  pg_locks  pg_size
ubuntu@packer-vmware-iso:/bosh/stemcell_builder/stages/munin/assets/plugins/postgres$ cat pg_locks
#!/usr/bin/perl
# -*- cperl -*-
#
# Copyright (C) 2009 Magnus Hagander, Redpill Linpro AB
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.


use strict;
use warnings;

use Munin::Plugin::Pgsql;

my $pg = Munin::Plugin::Pgsql->new(
    title     => 'PostgreSQL locks',
    info      => 'PostgreSQL locks',
    vlabel    => 'Locks',
    basequery => [
        "SELECT tmp.mode,COALESCE(count,0) FROM
          (VALUES ('accesssharelock'),('rowsharelock'),('rowexclusivelock'),('shareupdateexclusivelock'),('sharelock'),('sharerowexclusivelock'),('exclusivelock'),('accessexclusivelock')) AS tmp(mode)
         LEFT JOIN
          (SELECT lower(mode) AS mode,count(*) AS count
           FROM pg_locks WHERE database IS NOT NULL %%FILTER%%
           GROUP BY lower(mode)
          ) AS tmp2
         ON tmp.mode=tmp2.mode ORDER BY 1", [
            8.1,
            "SELECT tmp.mode,COALESCE(count,0) FROM
             (SELECT 'accesssharelock' AS mode UNION ALL SELECT 'rowsharelock'
              UNION ALL SELECT 'rowexclusivelock' UNION ALL SELECT 'shareupdateexclusivelock'
              UNION ALL SELECT 'sharelock' UNION ALL SELECT 'sharerowexclusivelock'
              UNION ALL SELECT 'exclusivelock' UNION ALL SELECT 'accessexclusivelock'
            ) AS tmp
            LEFT JOIN
             (SELECT lower(mode) AS mode,count(*) AS count
              FROM pg_locks WHERE database IS NOT NULL %%FILTER%%
              GROUP BY lower(mode)
             ) AS tmp2
           ON tmp.mode=tmp2.mode ORDER BY 1"
        ],
    ],
    wildcardfilter => "AND database=(SELECT oid FROM pg_database WHERE datname=?)",
    configquery    => [
        "VALUES
         ('accesssharelock','AccessShareLock','Used by read only queries'),
         ('rowsharelock','RowShareLock','Used by SELECT FOR SHARE and SELECT FOR UPDATE queries'),
         ('rowexclusivelock','RowExclusiveLock','Used by UPDATE, DELETE and INSERT queries'),
         ('shareupdateexclusivelock','ShareUpdateExclusiveLock','Used by VACUUM, ANALYZE and CREATE INDEX CONCURRENTLY queries'),
         ('sharelock','ShareLock','Used by CREATE INDEX queries'),
         ('sharerowexclusivelock','ShareRowExclusiveLock','Only issued explicitly from applications'),
         ('exclusivelock','ExclusiveLock','Infrequently issued on system tables, or by applications'),
         ('accessexclusivelock','AccessExclusiveLock','Used by ALTER TABLE, DROP TABLE, TRUNCATE, REINDEX, CLUSTER and VACUUM FULL queries')", [
            8.1,
            "SELECT 'accesssharelock','AccessShareLock','Used by read only queries' UNION ALL
            SELECT 'rowsharelock','RowShareLock','Used by SELECT FOR SHARE and SELECT FOR UPDATE queries' UNION ALL
            SELECT 'rowexclusivelock','RowExclusiveLock','Used by UPDATE, DELETE and INSERT queries' UNION ALL
            SELECT 'shareupdateexclusivelock','ShareUpdateExclusiveLock','Used by VACUUM, ANALYZE and CREATE INDEX CONCURRENTLY queries' UNION ALL
            SELECT 'sharelock','ShareLock','Used by CREATE INDEX queries' UNION ALL
            SELECT 'sharerowexclusivelock','ShareRowExclusiveLock','Only issued explicitly from applications' UNION ALL
            SELECT 'exclusivelock','ExclusiveLock','Infrequently issued on system tables, or by applications' UNION ALL
            SELECT 'accessexclusivelock','AccessExclusiveLock','Used by ALTER TABLE, DROP TABLE, TRUNCATE, REINDEX, CLUSTER and VACUUM FULL queries'"
        ]
    ],
    suggestquery => "SELECT datname FROM pg_database WHERE datallowconn AND NOT datistemplate AND NOT datname='postgres' UNION ALL SELECT 'ALL' ORDER BY 1 LIMIT 10",
    graphdraw    => 'AREA',
    stack        => 1,
);

$pg->Process();
exit(0);
